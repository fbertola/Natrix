#include "bgfx_compute.sh"

BUFFER_RO(_ParticlesIn, float, 9);

BUFFER_WR(_ParticlesOut, float, 10);

BUFFER_RO(_Velocity, vec2, 1);

BUFFER_RO(_Obstacles, vec2, 7);

uniform vec2 _ParticleSize;

uniform vec2 _VelocitySize;

uniform float _Dissipation;

uniform float _ElapsedTime;

uniform float _Speed;

vec2 GetVelocity(vec2 fPos)
{
    ivec2 zero = ivec2(0, 0);
    ivec2 size_bounds = ivec2(_VelocitySize.x - 1u, _VelocitySize.y - 1u);
    ivec2 top_right = ivec2(clamp(ceil(fPos), vec2(zero), vec2(size_bounds)));
    ivec2 bottom_left = ivec2(clamp(floor(fPos), vec2(zero), vec2(size_bounds)));
    vec2 delta = fPos - vec2(bottom_left);
    vec2 lt = _Velocity[uint(top_right.y) * _VelocitySize.x + uint(bottom_left.x)];
    vec2 rt = _Velocity[uint(top_right.y) * _VelocitySize.x + uint(top_right.x)];
    vec2 lb = _Velocity[uint(bottom_left.y) * _VelocitySize.x + uint(bottom_left.x)];
    vec2 rb = _Velocity[uint(bottom_left.y) * _VelocitySize.x + uint(top_right.x)];
    vec2 h1 = mix(lt, rt, vec2(delta.x));
    vec2 h2 = mix(lb, rb, vec2(delta.x));
    return mix(h2, h1, vec2(delta.y)) * (_ParticleSize / _VelocitySize);
}

NUM_THREADS(16, 16, 1)
void main()
{
    if (gl_GlobalInvocationID.x >= _ParticleSize.x || gl_GlobalInvocationID.y >= _ParticleSize.y)
    {
        return;
    }

    uint particle_pos = gl_GlobalInvocationID.y * _ParticleSize.x + gl_GlobalInvocationID.x;
    vec2 fNormalisedPos = vec2(float(gl_GlobalInvocationID.x) / float(_ParticleSize.x), float(gl_GlobalInvocationID.y) / float(_ParticleSize.y)) * vec2(_VelocitySize);
    uint obstacle_pos = (uint(fNormalisedPos.y)) * _VelocitySize.x + (uint(fNormalisedPos.x));
    vec2 obstacle = _Obstacles[obstacle_pos];

    if (obstacle.x > 0.0f || obstacle.y > 0.0f)
    {
        _ParticlesOut[particle_pos] = 0.0f;
    }
    else
    {
        vec2 vel = GetVelocity(fNormalisedPos);
        vec2 final_pos = vec2(float(gl_GlobalInvocationID.x) - vel.x * _ElapsedTime * _Speed, float(gl_GlobalInvocationID.y) - vel.y * _ElapsedTime * _Speed);
        ivec2 zero = ivec2(0, 0);
        ivec2 size_bounds = ivec2(_ParticleSize.x - 1u, _ParticleSize.y - 1u);
        ivec2 top_right = ivec2(clamp(ceil(final_pos), vec2(zero), vec2(size_bounds)));
        ivec2 bottom_left = ivec2(clamp(floor(final_pos), vec2(zero), vec2(size_bounds)));
        vec2 delta = final_pos - vec2(bottom_left);
        float lt = _ParticlesIn[uint(top_right.y) * _ParticleSize.x + uint(bottom_left.x)];
        float rt = _ParticlesIn[uint(top_right.y) * _ParticleSize.x + uint(top_right.x)];
        float lb = _ParticlesIn[uint(bottom_left.y) * _ParticleSize.x + uint(bottom_left.x)];
        float rb = _ParticlesIn[uint(bottom_left.y) * _ParticleSize.x + uint(top_right.x)];
        float h1 = mix(lt, rt, vec2(delta.x));
        float h2 = mix(lb, rb, vec2(delta.x));
        _ParticlesOut[particle_pos] = mix(h2, h1, vec2(delta.y)) * _Dissipation;
    }
}